<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>freshman-python-basics-1</title>
    <url>/2023/04/06/freshman-python-basics-1/</url>
    <content><![CDATA[<p>自动化运维新手村-Python基础-1</p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><blockquote>
<p>首先说明，以下几类读者朋友们请自行对号入座：</p>
</blockquote>
<ul>
<li><blockquote>
<p>对CMDB很了解但对于Python还没有上手的读者，强烈建议阅读此篇；</p>
</blockquote>
</li>
<li><blockquote>
<p>了解过Python基本的数据结构，但又没有经常在实践中运用的读者，建议阅读此篇；</p>
</blockquote>
</li>
<li><blockquote>
<p>已经可以熟练写出Python脚本，但对CMDB不是很了解的读者，建议阅读此篇；</p>
</blockquote>
</li>
</ul>
<h2 id="CMDB简介"><a href="#CMDB简介" class="headerlink" title="CMDB简介"></a><strong>CMDB简介</strong></h2><p>简单赘述以下，CMDB的英文全称是Configuration Management Database，中文名叫配置管理数据库，它几乎贯穿了运维的每个环节。在实际的项目中，<strong>CMDB常常被认为是构建其它ITIL(Information Technology Infrastructure Library，IT基础架构库)流程的基础，ITIL项目的成败与是否成功建立CMDB有非常大的关系。</strong></p>
<p>对于一些中大型的互联网公司必然都有自研的CMDB系统，而一些初创公司可能采用开源的CMDB工具或者部分运维工程师日常使用Excel表格充当简易的CMDB功能，我们的<strong>目的并不是让大家去构建一个新的CMDB去推翻原有系统</strong>，也不是说用Excel表格就不如用Python来的高级，而是<strong>能让大家从CMDB自顶向下的拆解，来更生动的体会到Python基础数据结构的运用</strong></p>
<h2 id="CMDBv1-0"><a href="#CMDBv1-0" class="headerlink" title="CMDBv1.0"></a><strong>CMDBv1.0</strong></h2><p>实现完整的CMDB十分复杂，但作为讲解Python基本数据结构的范例，我们先实现一个简易的1.0版本。</p>
<p>CMDBv1.0只需要通过一个Python脚本就可以做到资产数据的增删改查。</p>
<blockquote>
<p>可能会有一些有CMDB使用经验的朋友会有质疑，觉得这也叫CMDB，还请大家稍安勿躁，任何大型系统的构建都是经过日积月累的迭代，但我可以保证，在项目冷启动阶段，这样一个稍微简陋的1.0版本，就可以起到基本的资产管理的作用。</p>
</blockquote>
<p>下面假设我们已经有了一个Python脚本，名叫 <code>cmdb-v1.0.py</code> ，我们简单的演示以下它的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python3 cmdb-v1.0.py init beijing  // 初始化beijing IDC</span></span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;beijing&quot;: &#123;</span><br><span class="line"></span><br><span class="line">        &quot;idc&quot;: &quot;beijing&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;switch&quot;: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">        &quot;router&quot;: &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python3 cmdb-v1.0.py add /beijing/switch   // 添加beijing IDC的IP地址是10.0.0.1的交换机信息</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;beijing&quot;: &#123;</span><br><span class="line"></span><br><span class="line">        &quot;idc&quot;: &quot;beijing&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;switch&quot;: &#123;</span><br><span class="line"></span><br><span class="line">            &quot;10.0.0.1&quot;: &#123;</span><br><span class="line"></span><br><span class="line">                &quot;ip&quot;: &quot;10.0.0.1&quot;,</span><br><span class="line"></span><br><span class="line">                &quot;manufacturer&quot;: &quot;cisco&quot;,</span><br><span class="line"></span><br><span class="line">                &quot;hostname&quot;: &quot;cisco-nx95-00-00-01&quot;,</span><br><span class="line"></span><br><span class="line">                &quot;hardware&quot;: &quot;nexus9500&quot;,</span><br><span class="line"></span><br><span class="line">                &quot;role&quot;: &quot;asw&quot;,</span><br><span class="line"></span><br><span class="line">                &quot;port&quot;: [&quot;Eth1/1/0&quot;, &quot;Eth1/1/1&quot;, &quot;Eth1/1/2&quot;],</span><br><span class="line"></span><br><span class="line">                &quot;stack&quot;: true</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &quot;router&quot;: &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python3 cmdb-v1.0.py get /beijing/switch/10.0.0.1  // 读取beijing IDC的IP地址是10.0.0.1的交换机信息</span></span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;ip&quot;: &quot;10.0.0.1&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;manufacturer&quot;: &quot;cisco&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;hostname&quot;: &quot;cisco-nx95-00-00-01&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;hardware&quot;: &quot;nexus9500&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;role&quot;: &quot;asw&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;port&quot;: [</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/0&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/1&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/2&quot;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &quot;stack&quot;: true</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python .\cmdb-v1.0.py update /beijing/switch/10.0.0.1/hostname &#x27;\&quot;test\&quot;&#x27;  // 将 beijing IDC的IP地址是10.0.0.1的交换机主机名修改为 test</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python .\cmdb-v1.0.py get /beijing/switch/10.0.0.1  // 读取验证相关信息</span></span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;ip&quot;: &quot;10.0.0.1&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;manufacturer&quot;: &quot;cisco&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;hostname&quot;: &quot;test&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;hardware&quot;: &quot;nexus9500&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;role&quot;: &quot;asw&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;port&quot;: [</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/0&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/1&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/2&quot;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &quot;stack&quot;: true</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python .\cmdb-v1.0.py delete /beijing/switch/10.0.0.1/role  // 删除beijing IDC的IP地址是10.0.0.1的交换机的角色属性</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python .\cmdb-v1.0.py delete /beijing/switch/10.0.0.1/port &#x27;[\&quot;Eth1/1/0\&quot;]&#x27;  // 删除beijing IDC的IP地址是10.0.0.1的交换机端口属性中的 Eth1/1/0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">root&gt; </span><span class="language-bash"><span class="comment"># python .\cmdb-v1.0.py get /beijing/switch/10.0.0.1  // 读取验证相关信息</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;ip&quot;: &quot;10.0.0.1&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;manufacturer&quot;: &quot;cisco&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;hostname&quot;: &quot;test&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;hardware&quot;: &quot;nexus9500&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;port&quot;: [</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/1&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;Eth1/1/2&quot;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &quot;stack&quot;: true</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面演示的几个步骤包括了地域的初始化，资产信息的增删改查，大家可以发现整个1.0版本中，数据源的结构是比较清晰的，几乎涉及到了Python中最常用的数据类型，以及不同数据类型的常用操作，所以这也是我想以CMDB为例切入Python的原因。</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h2><blockquote>
<p>从笔者个人经历来说，写过Python，Java，Golang，至今仍然觉得Python是一门十分优秀的语言，能够持续霸占最热门语言的前三甲，确实有其独到之处</p>
</blockquote>
<h4 id="Python优缺点"><a href="#Python优缺点" class="headerlink" title="Python优缺点"></a><strong>Python优缺点</strong></h4><ul>
<li>优点<ul>
<li>简单</li>
<li>免费、开源</li>
<li>高层语言面向对象</li>
<li>可扩展性</li>
<li>丰富的库</li>
</ul>
</li>
<li>缺点<ul>
<li>性能，虽然有一部分网友还是对Python颇有微词，但如果非要从Python的众多缺点中挑一个最重要的一点的话，那就是性能问题，但性能问题绝对不是我们弃用Python的原因，目前仍然有诸多方法可以保证Python支持企业级应用平稳运行迭代，而且就连字节如此大体量的公司很多地方都仍然使用Python进行开发</li>
</ul>
</li>
</ul>
<h2 id="CMDB拆解及Python基本数据类型"><a href="#CMDB拆解及Python基本数据类型" class="headerlink" title="CMDB拆解及Python基本数据类型"></a><strong>CMDB拆解及Python基本数据类型</strong></h2><h3 id="CMDB-拆解"><a href="#CMDB-拆解" class="headerlink" title="CMDB 拆解"></a><strong>CMDB 拆解</strong></h3><p>根据上面的演示大家应该已经大概了解CMDBv1.0版本的数据源大概长什么样子了，它的层级的划分其实是根据每个公司不同的实际场景决定的，我们这里就暂且先考虑普适情况，即idc为顶层，其包含了switch和router，然后再包含具体的设备信息和属性，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;beijing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;idc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;beijing&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;switch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">&quot;10.0.0.1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;manufacturer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco-nx95-00-00-01&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hardware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nexus9500&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asw&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;Eth1/1/0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;Eth1/1/1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;Eth1/1/2&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">&quot;10.0.0.2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;manufacturer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco-nx95-00-00-02&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hardware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nexus9500&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dsw&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;GEth1/1/0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;GEth1/1/1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;GEth1/1/2&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;router&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">&quot;10.0.0.3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;manufacturer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco-nx95-00-00-01&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hardware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nexus9500&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;br&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;TGEth1/0/0/1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;TGEth1/0/0/2&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;TGEth1/0/0/3&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;bgp_as&quot;</span><span class="punctuation">:</span> <span class="number">64512</span></span><br><span class="line"></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;shanghai&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;idc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shanghai&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;switch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">&quot;10.0.1.1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;manufacturer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco-nx95-00-01-01&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hardware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nexus9500&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asw&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;Eth1/1/0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;Eth1/1/1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;Eth1/1/2&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;router&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">&quot;10.0.1.3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;manufacturer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cisco-nx95-00-01-01&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;hardware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nexus9500&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;br&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;TGEth1/0/0/1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;TGEth1/0/0/2&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;TGEth1/0/0/3&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;bgp_as&quot;</span><span class="punctuation">:</span> <span class="number">64512</span></span><br><span class="line"></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>想必很多读者都听过数据结构，构建一个可扩展的CMDB非常需要一个合适的数据结构，当然很多计算机专业的同学应该了解，数据结构是一门十分复杂的学科，无法在短时间内将其讲解清楚，感兴趣的同学可以阅读番外篇详细了解，此处我们先简短的介绍一下需要用到的一些概念：</p>
<h5 id="数据结构（英语：data-structure）是计算机中存储、组织数据的方式，不同种类的数据结构适合于不同种类的应用；常见的数据结构有，栈，队列，数组，链表，树，图，堆，散列表-x3D"><a href="#数据结构（英语：data-structure）是计算机中存储、组织数据的方式，不同种类的数据结构适合于不同种类的应用；常见的数据结构有，栈，队列，数组，链表，树，图，堆，散列表-x3D" class="headerlink" title="数据结构（英语：data structure）是计算机中存储、组织数据的方式，不同种类的数据结构适合于不同种类的应用；常见的数据结构有，栈，队列，数组，链表，树，图，堆，散列表&#x3D;"></a><strong>数据结构（英语：data structure）是计算机中存储、组织数据的方式，不同种类的数据结构适合于不同种类的应用；常见的数据结构有，栈，队列，数组，链表，树，图，堆，散列表&#x3D;</strong></h5><p>其实我们目前只需要用到<strong>数组</strong>和<strong>散列表</strong>(又称哈希表)两种数据结构，我先通俗易懂的讲解一下这两种数据结构</p>
<ul>
<li>数组， 可以将其理解为一个容器，里面可以装很多元素，只不过这些元素必须是相同类型的, 他们可以用下标的位置进行存取，如</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|a | b | c | d | e | f | g | h | i | j | </span><br><span class="line"></span><br><span class="line"> 0   1   2   3   4   5   6   7   8   9</span><br></pre></td></tr></table></figure>

<p>值得注意的是数组的下标永远都是从<code>0</code>开始，这个对于初期接触编程的读者朋友来说可能会有点儿不适应</p>
<ul>
<li>散列表，可以将其理解为通讯录，通讯录里的人不可以重名，每个人的名字都对应他的个人信息，个人信息可以存储任何数据，如</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;jack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19098090000&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;allen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;john&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shanghai&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;family&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;father&quot;</span><span class="punctuation">,</span> <span class="string">&quot;mother&quot;</span><span class="punctuation">,</span> <span class="string">&quot;sister&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Python基础数据操作"><a href="#Python基础数据操作" class="headerlink" title="Python基础数据操作"></a><strong>Python基础数据操作</strong></h3><blockquote>
<p>通过上述的介绍，我们了解到了CMDB-v1.0的数据源长什么样子，以及它使用了什么样的数据结构，那么接下来就是如何用Python来表示它，这就涉及到了Python的几大数据类型</p>
</blockquote>
<ul>
<li>字符串: 上述数据源中用到最多的类型就是字符串，如<code>&quot;ip&quot;</code>,<code> &quot;cisco&quot;</code>, <code>&quot;role&quot;</code>等</li>
<li>整数：Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，如 <code>1</code>, <code>64512</code>, <code>-100 </code>等</li>
<li>浮点数：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，<code>1.5e11</code>，<code>1.5e-21</code></li>
<li>布尔值：布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值</li>
<li>列表：Python中列表即为数据结构中的数组，一种有序的集合，可以随时添加和删除其中的元素</li>
<li>元组：另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改</li>
<li>集合：也是一组key的集合，但在set中，没有重复的key</li>
<li>字典：dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度，dict即为数据结构中的散列表</li>
</ul>
<blockquote>
<p>Tips</p>
</blockquote>
<blockquote>
<p>上述说列表和元组为有序序列，并不是说列表和元组中的元素会按大小顺序排列，而是说列表和元组中的每个元素的排列是固定的，即不管print多少次，显示的结果是一样的；但字典和集合中的元素不是有序的，print出的结果可能会不一样；这种现象其实是由于不同的数据结构在计算机内存中不同的存储和表示方法造成的，后续会在番外篇中详细解释。</p>
</blockquote>
<p>下面我们就结合CMDB-v1.0的数据源逐一讲解涉及到的数据类型和其操作：</p>
<h4 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a><strong>第一个Python程序</strong></h4><p>学习任何一门编程语言第一个程序都是如何打印出<code>Hello World</code>，Python对此的实现十分简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在命令行模式下，输入python，进入Python的交互模式&gt;&gt;&gt; print(&quot;Hello, World!!!&quot;)# 输出结果为 Hello World# 输入exit()退出Python交互模式，或者可以直接输入ctrl-D直接退出</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Tips</strong></p>
</blockquote>
<blockquote>
<p>从Python实现打印一行字符串其实可以看出很多这门语言的特点，首先给人的第一感觉就是简洁，代码阅读起来和阅读英文十分相似，其次就是Python程序的运行不需要编译，诸如C++，JAVA，Golang运行前都需要进行编译，这是因为<strong>Python是一门解释型语言</strong>，具体关于解释型语言和编译型语言的区别，后续会在番外篇中详细解释。</p>
</blockquote>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h4><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头，比如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">port_num = <span class="number">40</span> <span class="comment"># 变量port_num是一个整数</span></span><br><span class="line">hostname = <span class="string">&quot;cisco-test&quot;</span> <span class="comment"># 变量hostname是一个字符串。</span></span><br><span class="line">stack = <span class="literal">True</span> <span class="comment"># 变量stack是一个布尔值True</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Tips</strong></p>
</blockquote>
<blockquote>
<p>有过其他语言学习经历的同学可能会了解，程序中定义一个变量时，需要指定这个变量的数据类型，比如 <code>int a = 123;</code>，当把变量<code>a</code>指定为整型时，就无法把字符串再赋值给它，如<code>a=&#39;ABC&#39;</code>，这样会出发报错，但Python并没有这样的限制，这也是Python的另一大特点，即<strong>Python是一门动态类型语言</strong>，动态类型语言的一大好处就是灵活，这也是Python易上手的原因之一，但同时，由于在运行时才确定变量的数据类型，相较于静态类型语言，动态类型语言更容易出错，但我们享受其优点的同时，就必须要接受其弊病。更多关于静态语言与动态语言类型的区别，后续会在番外篇中详细解释。</p>
</blockquote>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h4><p>上面的示例代码中我们有使用到注释，注释可以帮我们很好的对代码进行解释说明，利于我们及他人后续阅读</p>
<p>Python的注释一般分为两种</p>
<ul>
<li>单行注释，可以跟在某行代码的后面，或者写在一个代码块的上面，没有强制的规定， 如</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">port_num = <span class="number">40</span> <span class="comment"># 变量port_num是一个整数</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量port_num是一个整数port_num = 40</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多行注释，顾名思义，可以在多行注释内写多行文本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;变量port_num是一个整数这是一个十分复杂的代码&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">port_num = <span class="number">40</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Tips</strong></p>
</blockquote>
<blockquote>
<p>程序员之间比较流行的一句话是：今天的代码没写注释，别说其他人以后不认识，明天我自己就不认识了。</p>
</blockquote>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h4><p>在CMDB-v1.0中端口属性的数据类型就是数组，与之相对应的数据结构是列表。</p>
<p>该数组中存储了某台设备上所有的端口号，我们以此为例看看Python中的数组都有哪些常用操作：</p>
<ul>
<li><strong>如果我们想知道一共有多少端口</strong>，可以使用<code>len()</code>方法，len即为length的简称，很多方法名其实是可以根据名称推断出其作用</li>
</ul>
<p><code>len()</code>方法即为求某个可迭代对象的长度，此处我们的可迭代对象为数组，何为可迭代对象，我们会在番外篇中提到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>port = [<span class="string">&quot;Eth1/1/0&quot;</span>, <span class="string">&quot;Eth1/1/1&quot;</span>, <span class="string">&quot;Eth1/1/2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(port)<span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想获取某一个端口</strong>，可以使用数组下标索引进行访问，下标索引默认从<code>0</code>开始，最大为数组长度-1，如果超过数组长度，则会报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>port = [<span class="string">&quot;Eth1/1/0&quot;</span>, <span class="string">&quot;Eth1/1/1&quot;</span>, <span class="string">&quot;Eth1/1/2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port[<span class="number">0</span>]<span class="comment"># 输出 Eth1/1/0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port[<span class="number">2</span>]<span class="comment"># 输出 Eth1/1/2</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; port[-<span class="number">1</span>]<span class="comment"># 等同于上一个，Eth1/1/2，以此类推，-2即为倒数第二个元素，同样不可以超出数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port[<span class="built_in">len</span>(port)-<span class="number">1</span>]<span class="comment"># 输出 Eth1/1/2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port[<span class="number">3</span>]<span class="comment"># 会产生 IndexError 错误</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想在端口列表中增加一个端口</strong>，可以使用append()方法</li>
</ul>
<p><code>append()</code>方法为在数组末尾追加一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>port = [<span class="string">&quot;Eth1/1/0&quot;</span>, <span class="string">&quot;Eth1/1/1&quot;</span>, <span class="string">&quot;Eth1/1/2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port.append(<span class="string">&quot;Eth1/1/3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port<span class="comment"># 输出 [&quot;Eth1/1/0&quot;, &quot;Eth1/1/1&quot;, &quot;Eth1/1/2&quot;, &quot;Eth1/1/3&quot;]</span></span><br></pre></td></tr></table></figure>

<p><code>insert()</code>方法可以在数组任意位置插入一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>port = [<span class="string">&quot;Eth1/1/0&quot;</span>, <span class="string">&quot;Eth1/1/1&quot;</span>, <span class="string">&quot;Eth1/1/2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port.insert(<span class="number">1</span>, <span class="string">&quot;Eth1/1/1/1&quot;</span>)<span class="comment"># 输出 [&quot;Eth1/1/0&quot;, &quot;Eth1/1/1/1&quot;, Eth1/1/1&quot;, &quot;Eth1/1/2&quot;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想将两个端口列表合并</strong>，可以使用extend方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>port = [<span class="string">&quot;Eth1/1/0&quot;</span>, <span class="string">&quot;Eth1/1/1&quot;</span>, <span class="string">&quot;Eth1/1/2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port.extend([<span class="string">&quot;Eth1/1/3&quot;</span>, <span class="string">&quot;Eth1/1/4&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port<span class="comment"># 输出 [&quot;Eth1/1/0&quot;, &quot;Eth1/1/1&quot;, &quot;Eth1/1/2&quot;, &quot;Eth1/1/3&quot;, &quot;Eth1/1/4&quot;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想修改数组中某个元素</strong>，可以直接使用下标索引并对其赋值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>port = [<span class="string">&quot;Eth1/1/0&quot;</span>, <span class="string">&quot;Eth1/1/1&quot;</span>, <span class="string">&quot;Eth1/1/2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port[<span class="number">1</span>] = <span class="string">&quot;GEth1/1/1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port<span class="comment"># 输出 [&quot;Eth1/1/0&quot;, &quot;GEth1/1/1&quot;, &quot;Eth1/1/2&quot;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想删除端口列表中的最后一个端口</strong>，可以使用pop()方法</li>
</ul>
<p><code>pop()</code>方法会返回弹出数组的最后一个元素，并将其返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>port = [<span class="string">&quot;Eth1/1/0&quot;</span>, <span class="string">&quot;Eth1/1/1&quot;</span>, <span class="string">&quot;Eth1/1/2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port.pop()<span class="comment"># 输出 Eth1/1/2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>port<span class="comment"># 输出 [&quot;Eth1/1/0&quot;, &quot;Eth1/1/1&quot;]</span></span><br></pre></td></tr></table></figure>

<p><code>pop(i)</code>可以弹出数组中任意位置的元素</p>
<ul>
<li><strong>更多数组相关的操作我们可以在以后的实践中慢慢学习</strong></li>
</ul>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h4><p>CMDB-v1.0中的核心数据类型是字典，对应的数据结构是散列表。</p>
<p>字典中存储了某个IDC的名称和其设备信息，我们以此为例看看Python中的字典都有哪些常用操作：</p>
<ul>
<li><strong>如果我们想知道这个字典是存储的IDC的信息</strong>，可以使用键对其进行查找</li>
</ul>
<blockquote>
<p>字典具有一个性质就是不管存储的数据有多大，根据某个键对其进行查找的速度都会非常快，不会随着字典数据的增加而变慢，这是数据结构中散列表的一个特性，并且字典要求键必须是不可变对象，相关知识我们后续会在番外篇中提到，此处我们暂且以字符串作为字典的键</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;&#123;...&#125;, &#123;...&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bj_info= data[<span class="string">&quot;beijing&quot;</span>]  <span class="comment"># 获取beijing IDC的数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.get(<span class="string">&quot;beijing&quot;</span>)  <span class="comment"># 同样为根据键进行查找，当字典中不存在 &quot;beijing&quot; 这个键时会返回 None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idc_info.get(<span class="string">&quot;xiamen&quot;</span>, &#123;&#125;)  <span class="comment"># dict.get() 方法可以接收另外一个参数，作为查找的键值不存在时的默认返回值# 输出 &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想修改IDC的值</strong>，可以通过键对其进行赋值</li>
</ul>
<p>字典中键和值是一一对应的，一个键只能存储一个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>device_info = data[<span class="string">&quot;beijing&quot;</span>][<span class="string">&quot;switch&quot;</span>][<span class="string">&quot;10.0.0.1&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>device_info[<span class="string">&quot;hostname&quot;</span>] = <span class="string">&quot;test&quot;</span>  <span class="comment"># 将device_info设备的hostname修改为test</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想知道switch下有哪些设备IP</strong>，可以使用<code>dict.keys()</code>方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bj_switches = data[<span class="string">&quot;beijing&quot;</span>][<span class="string">&quot;switch&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bj_switches.keys()<span class="comment"># 输出 [&quot;10.0.0.1&quot;, &quot;10.0.0.2&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bj_switches.values()  <span class="comment"># 该方法可以获取字典中的所有值，得到beijing IDC的所有switch的详情# 输出 [&#123;...&#125;, &#123;...&#125;] </span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想给某个设备新增属性信息</strong>，可以直接用键去赋值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>switch_info_10_1 = bj_switches.get(<span class="string">&quot;10.0.0.1&quot;</span>, &#123;&#125;)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值时必须保证变量是字典，所以如果此处不用dict.get() 默认返回空字典，那么当不存在查询的数据时就会返回None，给None通过键赋值就会报错</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>switch_info_10_1[<span class="string">&quot;label&quot;</span>] = <span class="string">&quot;test_label&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>switch_info_10_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 &#123; &quot;label&quot;: &quot;test_label&quot;, manufacturer&quot;: &quot;cisco&quot;, &quot;hostname&quot;: &quot;cisco-nx95-00-00-01&quot;, ...&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想用某个新的设备信息覆盖原有设备的属性信息</strong>，可以使用<code>dict.update()</code>方法</li>
</ul>
<p><code>dict.update()</code>方法接收一个字典，用来更新在原有的字典上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_dict = &#123; <span class="string">&quot;hostname&quot;</span>：<span class="string">&quot;test-00-00-01&quot;</span>, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;csw&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>switch_info_10_1.update(new_dict)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>switch_info_10_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 &#123; &quot;manufacturer&quot;: &quot;cisco&quot;, &quot;hostname&quot;: &quot;test-00-00-01&quot;, ...&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想删除设备的某个属性</strong>，可以使用<code>dict.pop()</code>方法</li>
</ul>
<p><code>dict.pop()</code>方法接收一个键，将该键和其对应的值从字典中删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bj_switches[<span class="string">&quot;10.0.0.1&quot;</span>].pop(<span class="string">&quot;label&quot;</span>)  <span class="comment"># 删除beijing IDC下10.0.0.1设备的label属性</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>更多字典相关的操作我们可以在以后的实践中慢慢学习</strong></li>
</ul>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h4><p>我们CMDB-v1.0中最多使用到的就是字符串这一数据类型，如<code>&quot;idc&quot;, &quot;beijing&quot;,&quot;ip&quot;</code>等，在Python中使用引号将一串字符引住，即为字符串，引号可以是双引号或者单引号并没有强制要求，但具体如何使用更加规范我们会在番外篇中提到。</p>
<p>下面我们以设备的主机名为例，看看对于字符串有哪些具体的操作方法需要用到， 如<code>&quot;cisco-nx95-00-00-01&quot;</code></p>
<ul>
<li><strong>如果我们想查看主机名的长度</strong>，可以使用<code>len()</code>方法，上文中提到<code>len()</code>可以获取数组的长度，因为字符串同样也为可迭代对象，所以<code>len()</code>同样可以获取字符串的长度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hostname = <span class="string">&quot;cisco-nx95-00-00-01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(hostname)<span class="comment"># 输出 19</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们将主机名以</strong><code>**-**</code><strong>分隔</strong>，可以使用<code>split()</code>方法，该方法需要传入分隔符，并且返回一个数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hostname.split(<span class="string">&quot;-&quot;</span>)<span class="comment"># 输出 [&quot;cisco&quot;, &quot;nx95&quot;, &quot;00&quot;, &quot;00&quot;, &quot;01&quot;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想获取字符串的某一段</strong>，可以使用切片的方式，因为Python中字符串的存储与数组十分类似，所以切片的方式同时适用于数组和字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hostname[<span class="number">0</span>:<span class="number">5</span>]  <span class="comment"># 0可以省略，故等价于 hostname[:5]，Python中的切片是一个左闭右开区间，0-5的切片范围不包括下标5# 输出 cisco</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hostname[<span class="number">6</span>:<span class="built_in">len</span>(hostname)]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 hostname[6:]，切片的区间右侧数字大于等于字符串长度时，都不会报错，此时相当于一直取到字符串末尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 nx95-00-00-01</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hostname[<span class="number">0</span>:<span class="built_in">len</span>(hostname):<span class="number">2</span>]  <span class="comment"># 切片操作可以接受第三个参数，用于表示步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 cson9-00-1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hostname[::-<span class="number">1</span>]  <span class="comment"># 第三个操作为负数时可以将字符串或数组倒置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10-00-00-59xn-ocsic</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们想获取某个字符所在的位置</strong>，可以使用<code>index()</code>方法，该方法接收字符参数，并且返回该字符在字符串中的第一个出现的下标</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hostname.index(<span class="string">&quot;-&quot;</span>)<span class="comment"># 输出 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>更多字符串相关的操作我们可以在以后的实践中慢慢学习</strong></li>
</ul>
<blockquote>
<p><strong>Tips</strong></p>
</blockquote>
<blockquote>
<p>字符串是一种十分常见的数据类型，但由于字符串是文本，既然是文本就涉及到不同国家之间的编码问题，关于编码相关的内容我们会在番外篇中详细解释，大家暂时只需要知道目前国际通用的是UTF-8编码即可。</p>
</blockquote>
<h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a><strong>知识总结</strong></h2><ul>
<li>介绍了CMDB在自动化运维中的重要性</li>
<li>演示了v1.0版本的CMDB的增删改查操作</li>
<li>讲解了Python常用的数据类型：字符串，数组，字典，以及对它们的常用操作方法</li>
</ul>
<p>CMDB系列第一节我们就暂且讲解到这里，其实Python的数据类型和其操作还没有全部涉及到，我们先只掌握最常用的即可，更多的类型和内置操作方法可以慢慢积累。</p>
<p>第二节我们就会进入到CMDBv1.0版本的具体代码，为大家讲解Python的基础语句以及函数和面向对象相关的知识。</p>
<blockquote>
<p><strong>篇后语</strong></p>
</blockquote>
<blockquote>
<p>文中我们多次提到部分内容会在番外篇中详细解释，最大的原因是某个知识点如果详细展开，都足以单独写一篇文章，但对于初学者来说，我们完全必要花时间在一些细枝末节上，因为当我们学习一门新知识时，我们最好的方法就是自顶向下逐步拆解，如果一头扎进知识的海洋中，那极有可能“溺亡”。</p>
</blockquote>
<blockquote>
<p>所以如果一些职场朋友，没有多余的精力去深究细节，就没有必要去看番外篇，当然如果对某个知识点十分感兴趣也可以多做了解；</p>
</blockquote>
<blockquote>
<p>但对于计算机专业的同学，不管已经毕业或者还未毕业，我都强烈大家建议阅读番外篇，只有基础打的足够牢，才能做到触类旁通。</p>
</blockquote>
]]></content>
      <categories>
        <category>Freshman</category>
      </categories>
      <tags>
        <tag>Python-Basics</tag>
        <tag>CMDB</tag>
      </tags>
  </entry>
  <entry>
    <title>User Guide</title>
    <url>/2023/04/06/hello-world/</url>
    <content><![CDATA[<p>Python玩转自动化运维-成长路径</p>
<p><strong>专注于自动化运维领域，帮助任何想将编程与运维相结合的朋友，从零开始引领大家走进运维自动化。</strong></p>
<h2 id="内容受众"><a href="#内容受众" class="headerlink" title="内容受众"></a>内容受众</h2><p>你是否已经决定走上了<strong>运维工程师</strong>的道路，或者是深耕运维多年的老手；</p>
<p>升职加薪一直与自己绝缘，还总是锅从天上来；</p>
<p>看着别人自动化运维搞得风生水起，自己巡检两台设备的时间别人已经巡检好了一百台设备，还顺带出了个报表，你迷茫了；</p>
<p>人往往很难跳出自己的舒适圈，对于之前没有涉足过的领域也很难找到合适的切入点，再加上平时的工作已经足够焦头烂额，没有时间去从零开始学一门新技术。</p>
<h2 id="内容定位"><a href="#内容定位" class="headerlink" title="内容定位"></a>内容定位</h2><p>并不为了单纯的输出枯燥的知识点，区别于其他资料的随意搬运，东一榔头西一棒子；</p>
<p>而是从场景出发，使输出的内容具有<strong>实操性</strong>，<strong>自顶向下</strong>将具体场景拆分，并落实到每个知识点，让同学清晰的意识到所学知识能够如何运用；</p>
<p>让运维老手掌握平时经常听到的 <strong>Netmiko, SNMP, Netconf</strong>等知识，能够学有所得，学能所用；</p>
<p>番外篇会将正篇中涉及到的细节逐一展开，让计算机专业同学能够深入理解，夯实基础，逐步掌握操作系统，数据结构等专业知识；</p>
<p>并且也会涉及到<strong>编程思想，学习方法论</strong>等技巧，让大家有挑战大厂的底气。</p>
<h2 id="路径的选择"><a href="#路径的选择" class="headerlink" title="路径的选择"></a>路径的选择</h2><p>对于正在从事运维工作，但工作中遇到了一些自动化的需求的朋友，那么这里作者并不提倡大家去构建整个的自动化运维体系，一个是没有必要，另一个是这也可能会消耗相当大的精力，所以我们就暂时只点与自己<strong>实际工作相关的技能</strong>即可，全部的技能树如下图所示：</p>
<p><img src="https://s2.loli.net/2023/04/05/WqE3Gb1TmsiQrjY.png" alt="img"></p>
<h2 id="路径的规划"><a href="#路径的规划" class="headerlink" title="路径的规划"></a>路径的规划</h2><h3 id="一、【自动化运维新手村】"><a href="#一、【自动化运维新手村】" class="headerlink" title="一、【自动化运维新手村】"></a>一、【<strong>自动化运维新手村</strong>】</h3><p>那么对于自动化运维来说肯定首推的编程语言就是Python。</p>
<p>但网上对于Python语言的教程一抓一大把，我为什么还要在这里去讲解呢？这其实等同于另一个问题：<strong>刚接触编程的人是否能通过看类似的教程快速上手Python?</strong> 或者通俗易懂的讲：<strong>是不是能看得懂?</strong></p>
<p>大部分从事运维工作的朋友可能都没有编程经验，也没有系统的学习过计算机底层原理，所以对于标准式的教程就会感觉，<strong>好像会了，但又没有全会；好像会了，但又不会用</strong>，所以我根据自己的学习方法再加上身边运维朋友们的学习经历，通过一些生动的例子和实际的场景来让大家快速的上手Python这门语言，并且能直接运用于实际工作中。</p>
<blockquote>
<p> 新手村的内容主要是为大家搭建一个简易的CMDB（资产管理），这也符合很多运维朋友的实际需求场景，比如想要做一个小功能，可以提供给其他人使用。除此之外也会对其中涉及到的部分知识点进行详细的深入挖掘，呈现在番外篇中，让对其感兴趣的读者朋友去更多的了解。</p>
</blockquote>
<ul>
<li>Python基本数据结构和操作</li>
</ul>
<blockquote>
<p>将CMDB的增删改查与Python数据结构相结合，将枯燥的基础知识进行深入浅出的讲解</p>
</blockquote>
<ul>
<li><p>番外：数据结构的详解</p>
</li>
<li><p>番外：字符串的详解</p>
</li>
<li><p>番外：数组的详解</p>
</li>
<li><p>番外：字典的详解</p>
</li>
<li><p>面试番外：算法</p>
</li>
<li><p>Python函数与对象</p>
</li>
</ul>
<blockquote>
<p>将如何构建CMDB的函数与对象逐步拆解</p>
</blockquote>
<ul>
<li><p>番外：深入了解面向对象</p>
</li>
<li><p>番外：设计模式简介</p>
</li>
<li><p>Flask Web框架</p>
</li>
</ul>
<blockquote>
<p>将对CMDB的操作与Web框架相结合，通过API的方式对CMDB进行操作</p>
</blockquote>
<ul>
<li><p>面试番外：计算机网络</p>
</li>
<li><p>MySQL数据库</p>
</li>
</ul>
<blockquote>
<p>将CMDB存储到数据库中，对其进行的增删改查从对文件读写转移到对数据库进行操作</p>
</blockquote>
<ul>
<li><p>番外：MongoDB数据库</p>
</li>
<li><p>面试番外：数据库</p>
</li>
<li><p>Linux部署应用</p>
</li>
</ul>
<blockquote>
<p>将应用部署在Linux系统上稳定的运行</p>
</blockquote>
<ul>
<li>面试番外：操作系统</li>
</ul>
<h3 id="二、【自动化运维初级村】"><a href="#二、【自动化运维初级村】" class="headerlink" title="二、【自动化运维初级村】"></a>二、【<strong>自动化运维初级村</strong>】</h3><blockquote>
<p> 其实初级村的内容顺序的设计和新手村是类似的，但这一部分所运用的Python知识就会稍微深入，所以建议已经对Python有一定了解的朋友，可以跳过新手村直接看初级村的内容，因为初级村会是更多运维朋友们经常遇到的需求场景，也是做自动化运必须要走的路。</p>
</blockquote>
<ul>
<li>paramiko和netmiko</li>
</ul>
<blockquote>
<p>两者的使用方式及优劣</p>
</blockquote>
<ul>
<li>Python 正则解析</li>
</ul>
<blockquote>
<p>将通过SSH收集回来的各种信息进行正则解析</p>
</blockquote>
<ul>
<li><p>番外：text-fsm解析</p>
</li>
<li><p>Python snmp</p>
</li>
</ul>
<blockquote>
<p>如何使用Python调用SNMP采集指令，并讲解OID使用方式</p>
</blockquote>
<ul>
<li>NetConf</li>
</ul>
<blockquote>
<p>如何通过NetConf对网络设备进行操作</p>
</blockquote>
<ul>
<li>Crontab并回调CMDB</li>
</ul>
<blockquote>
<p>如何设置定时执行SSH任务进行定期巡检，并更新回写CMDB</p>
</blockquote>
<ul>
<li><p>番外：Python scheduler</p>
</li>
<li><p>Flask Web框架</p>
</li>
</ul>
<blockquote>
<p>将SSH和NetConf与Web框架相结合，通过API方式或前端调用其执行</p>
</blockquote>
<h3 id="三、【自动化运维中级村】"><a href="#三、【自动化运维中级村】" class="headerlink" title="三、【自动化运维中级村】"></a>三、【<strong>自动化运维中级村</strong>】</h3><blockquote>
<p>中级村与初级村最大的不同就是，会从简单需求应用的完成，转变为更为复杂架构的设计与实现，以及能够支撑更大型运维的场景。</p>
</blockquote>
<ul>
<li>Celery任务队列</li>
</ul>
<blockquote>
<p>如何使用任务队列异步处理大量的SSH或NetConf执行操作</p>
</blockquote>
<ul>
<li><p>番外：Redis数据库</p>
</li>
<li><p>番外：RabbitMQ中间件</p>
</li>
<li><p>Rsyslog日志采集</p>
</li>
</ul>
<blockquote>
<p>通过Rsyslog收集设备日志并存储进行展示和查询。</p>
</blockquote>
<ul>
<li>Mysql性能优化</li>
</ul>
<blockquote>
<p>支持更大数据量的存储和查询，进行数据库的优化，分库和分表</p>
</blockquote>
<ul>
<li>ELK， Rsyslog - Kafkf - LogStash - ElasticSearch - Kibana</li>
</ul>
<blockquote>
<p>使用ELK套件对日志进行存储及展示</p>
</blockquote>
<ul>
<li>前后端分离</li>
</ul>
<blockquote>
<p>由于系统功能的丰富，需要实现前后端分离的应用。</p>
</blockquote>
<h3 id="四、【自动化运维高级村】"><a href="#四、【自动化运维高级村】" class="headerlink" title="四、【自动化运维高级村】"></a>四、【<strong>自动化运维高级村</strong>】</h3><blockquote>
<p>如果想要做一个完整的自动化运维系统，就必然需要有相应完善的自动化运维的理念和方法论，所以高级村会设计到更多关于自动化运维的理念介绍，以及更为复杂和适应更大型企业的自动化运维系统。 </p>
</blockquote>
<ul>
<li>Celery分时任务队列</li>
</ul>
<blockquote>
<p>使用Celery任务队列，将SNMP大量采集任务或SSH变更任务根据频率发布在不同的队列中进行高效采集</p>
</blockquote>
<ul>
<li>Flink处理</li>
</ul>
<blockquote>
<p>使用Flink对SNMP采集的数据进行清洗并存储</p>
</blockquote>
<ul>
<li>Rsyslog - Kafka - Consumer- MySQL</li>
</ul>
<blockquote>
<p>如何将设备上报的日志进行收集解析，并通过Kafka中间件削峰，并进行存储</p>
</blockquote>
<ul>
<li><p>番外： Kafka中间件</p>
</li>
<li><p>告警通知，屏蔽，抑制</p>
</li>
</ul>
<blockquote>
<p>如何设置告警的通知，屏蔽和抑制机制</p>
</blockquote>
<ul>
<li>任务编排</li>
</ul>
<blockquote>
<p>通过白屏方式将变更步骤注册为执行算子，并进行编排后下发</p>
</blockquote>
<ul>
<li>基于意图的分组配置下发</li>
</ul>
<blockquote>
<p>将设备根据角色分组，并设置基于意图的模板命令，使用SSH或NetConf方式与其结合对网络设备进行变更或查询操作</p>
</blockquote>
<h2 id="路径的总结"><a href="#路径的总结" class="headerlink" title="路径的总结"></a>路径的总结</h2><p>上述的路径梳理是一个目前我能给到大家的较为系统的自动化运维方面的实践，在更新的过程中，我可能会根据读者的需要或者平时的思考总结对内容进行更新迭代，所以说路径并不是固定的，它只是一个学习的方向，并且学习的过程必然是会有<strong>阻碍和困难</strong>的，希望大家都能有坚定的决心克服一个个的难点，当然也会提供给大家学习交流的群组，供大家互相探讨，互相进步，也欢迎大家有什么疑问都找我咨询。最后期待大家都能拿到属于自己的结果。</p>
<p><strong>欢迎大家添加我的个人公众号【Python玩转自动化运维】加入读者交流群，获取更多干货内容</strong></p>
<p><img src="https://s2.loli.net/2023/04/05/O71nPKbFcWwoRZS.jpg" alt="img"></p>
]]></content>
  </entry>
</search>
